<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>comments</key>
    <string>Recipe Notes:

We have to manually create the installs array due it being an App Installer. Luckily the version number of the App installer matches with what ends up being installed on disk.

Also the App mentioned at %RECIPE_CACHE_DIR%/pkg/root/private/tmp/logioptionsplus.app is actually just a renamed download of the Logi Options+ Installer.app

Due to what we think is a bug the Logi Options+ Installer hangs at the Login Window resulting in the end user having to reboot their computer. The  installcheck_script checks for a logged in user and bails if there isnt.</string>
    <key>Description</key>
    <string>Downloads the latest version of LogiOptionsPlus and imports it into Munki.</string>
    <key>Identifier</key>
    <string>com.github.dataJAR-recipes.munki.LogiOptionsPlus</string>
    <key>Input</key>
    <dict>
        <key>MUNKI_REPO_SUBDIR</key>
        <string>apps/%NAME%</string>
        <key>NAME</key>
        <string>LogiOptionsPlus</string>
        <key>pkginfo</key>
        <dict>
            <key>catalogs</key>
            <array>
                <string>testing</string>
            </array>
            <key>description</key>
            <string>Enhance your experience. Logi Options+ is the powerful, easy-to-use, next-gen application that enables customization for Logitech mice and keyboards so you can work how you want.</string>
            <key>developer</key>
            <string>Logitech Inc.</string>
            <key>display_name</key>
            <string>Logi Options+</string>
            <key>name</key>
            <string>%NAME%</string>
            <key>uninstall_method</key>
            <string>uninstall_script</string>
            <key>uninstall_script</key>
            <string>#!/bin/bash
#
rm -Rf /Applications/logioptionsplus.app
#
exit</string>
            <key>unattended_install</key>
            <true/>
            <key>unattended_uninstall</key>
            <true/>
        </dict>
    </dict>
    <key>MinimumVersion</key>
    <string>1.1</string>
    <key>ParentRecipe</key>
    <string>com.github.wegotoeleven-recipes.pkg.LogiOptionsPlus</string>
    <key>Process</key>
    <array>
         <dict>
            <key>Arguments</key>
            <dict>
                <key>info_path</key>
                <string>%RECIPE_CACHE_DIR%/pkg/root/private/tmp/logioptionsplus.app</string>
                <key>plist_keys</key>
                <dict>
                    <key>LSMinimumSystemVersion</key>
                    <string>min_os_ver</string>
                    <key>CFBundleVersion</key>
                    <string>CFBV</string>
                </dict>
            </dict>
            <key>Processor</key>
            <string>PlistReader</string>
        </dict>
        <dict>
             <key>Arguments</key>
             <dict>
                <key>additional_pkginfo</key>
                <dict>
                    <key>minimum_os_version</key>
                    <string>%min_os_ver%</string>
                    <key>installs</key>
                    <array>
                        <dict>
                            <key>type</key>
                            <string>application</string>
                            <key>CFBundleIdentifier</key>
                            <string>com.logi.optionsplus</string>
                            <key>CFBundleName</key>
                            <string>logioptionsplus</string>
                            <key>path</key>
                            <string>/Applications/logioptionsplus.app</string>
                            <key>CFBundleShortVersionString</key>
                            <string>%CFBV%</string>
                            <key>CFBundleVersion</key>
                            <string>%CFBV%</string>
                            <key>minosversion</key>
                            <string>%min_os_ver%</string>
                            <key>version_comparison_key</key>
                            <string>CFBundleShortVersionString</string>
                        </dict>
                    </array>
                    <key>version</key>
                    <string>%version%</string>
                    <key>installcheck_script</key>
                    <string>#!/bin/zsh

# Copyright 2025, Jamf Software, LLC.

#
# DESCRIPTION
#
# Exits with exit code 1 if no-one is logged in.
# If info_plist_path doesn't exist, proceeds with install.
# If info_plist_path exists and is older than munki, proceeds with install.

# Function to compare version strings using sort -V
compare_versions() {
    local version1="$1"
    local version2="$2"

    # Use sort -V to compare versions
    local sorted_first=$(printf '%s\n%s\n' "$version1" "$version2" | sort -V | head -n1)

    if [[ "$sorted_first" == "$version1" ]] &amp;&amp; [[ "$version1" != "$version2" ]]; then
        # version1 is strictly less than version2
        return 0
    else
        # version1 is greater than or equal to version2
        return 1
    fi
}

# Function to check if user is logged in
user_logged_in() {
    # Get the console user using system_profiler
    local console_user=$(scutil &lt;&lt;&lt; "show State:/Users/ConsoleUser" | awk '/Name :/ { print $3 }')

    # Check if someone is logged in and it's not loginwindow
    if [[ -n "$console_user" &amp;&amp; "$console_user" != "loginwindow" ]]; then
        return 0  # User is logged in
    else
        return 1  # No user logged in
    fi
}

# App path and version
app_path="/Applications/logioptionsplus.app/"
app_version="%version%"
info_plist_path="$app_path/Contents/Info.plist"

# Check if user is logged in
if user_logged_in; then
    # If the app exists
    if [[ -f "$info_plist_path" ]]; then
        # Get version from info.plist using plutil
        if installed_version=$(plutil -extract CFBundleShortVersionString raw "$info_plist_path" 2&gt;/dev/null); then
            echo "$app_path version $installed_version, installed..."

            # Compare the installed version with this installations
            if compare_versions "$installed_version" "$app_version"; then
                # Local version older, proceed with installation
                echo "Older version of $app_path located, proceeding with installation..."
                exit 0
            else
                # Local version newer, cancelling installation
                echo "Newer or the same version of $app_path located, cancelling installation..."
                exit 1
            fi
        else
            echo "Encountered an error when trying to parse $info_plist_path..."
            exit 1
        fi
    else
        # App is not installed and user is logged in, proceed.
        exit 0
    fi
else
    # Exit as no-one logged in
    exit 1
fi</string>
                </dict>
            </dict>
            <key>Processor</key>
            <string>MunkiPkginfoMerger</string>
        </dict>
        <dict>
            <key>Arguments</key>
            <dict>
                <key>pkg_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%-%version%.pkg</string>
                <key>repo_subdirectory</key>
                <string>%MUNKI_REPO_SUBDIR%</string>
                <key>version_comparison_key</key>
                <string>CFBundleShortVersionString</string>
            </dict>
            <key>Processor</key>
            <string>MunkiImporter</string>
        </dict>
        <dict>
            <key>Arguments</key>
            <dict>
                <key>path_list</key>
                <array>
                    <string>%RECIPE_CACHE_DIR%/pkg/</string>
                </array>
            </dict>
            <key>Processor</key>
            <string>PathDeleter</string>
        </dict>
    </array>
</dict>
</plist>
